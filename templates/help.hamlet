<div .col.col--main>
  <div .help>
    <h2>Help!
    <p>
      This page contains various information for package authors. If anything is
      missing or confusing, please
      <a href="https://github.com/purescript/pursuit/issues/new">let us know#
      \.
    <h3>Contents
    <ul>
      <li>
        <a href="#submitting-packages">How to submit packages
      <li>
        <a href="#submit-automated">Submitting packages from a script
      <li>
        <a href="#package-badges">Package badges

  <div #submitting-packages .help>
    <h3>How to submit packages
    <ol>
      <li>
        <p>
          Put the code up on GitHub. (Currently, GitHub is the only supported
          hosting method. If you'd rather host your code somewhere else, please
          open an issue and let us know).
      <li>
        <p>
          Create a git tag for the version you're releasing, if you haven't
          already. It is recommended to use <code>pulp version</code> to do
          this for you, as doing it this way will also check your package for
          common errors.
      <li>
        <p>
          Authenticate to GitHub by running <code>pulp login</code>. (This is
          necessary in order for us to be able to tell who uploaded which
          packages).
      <li>
        <p>
          Change to your project directory and run <code>pulp publish</code>.
          This will register your package on Bower if necessary, push commits
          and the relevant tag to your "origin" Git remote, and then generate
          your documentation and upload it to Pursuit.
        <p>
          <code>pulp publish</code> also accepts a <code>--no-push</code> flag
          which skips the Bower registration check as well as pushing commits
          (this is useful for uploading other people's packages, if you ever
          need to do this). There is also a <code>--push-to</code> option which
          allows you to specify a different Git remote to push tags and commits
          to.
    <p>
      Your package, together with documentation, should now appear in Pursuit.

  <div #module-docs .help>
    <h3>Writing Module Documentation
    <p>
      Pursuit builds documentation from module source files. Documentation is formatted
      as [markdown](https://guides.github.com/features/mastering-markdown/) prefixed on
      each line by `-- |`. Type signatures for functions and Class definitions are discovered
      and hyperlinked automagically.
    <p>
      Here's an example of a function with a docstring containing a code example:
    <p>
      <code>
        -- | Break an array into its first element and remaining elements.
        -- |
        -- | ``` purescript
        -- | f arr = case uncons arr of
        -- |   Just { head: x, tail: xs } -> something
        -- |   Nothing -> somethingElse
        -- | ```
        uncons :: forall a. Array a -> Maybe { head :: a, tail :: Array a }
        uncons = uncons' (const Nothing) \x xs -> Just { head: x, tail: xs }
  <div #submit-automated .help>
    <h3>Submitting packages from a script
    <p>
      You can also use Pulp to submit packages from a script. Pulp prompts
      for confirmation when you run <code>pulp publish</code>, so you will need
      to use a program like <code>yes</code> to answer affirmatively.
    <p>
      For example, if you want to automatically upload documentation from your
      Travis CI build on tags, you should add the following to your
      `after_script` build step:
    <p>
      <code>test -n "$TRAVIS_TAG" && ( yes | pulp publish --no-push )
    <p>
      Alternatively, if you don't want to use Pulp for whatever reason, you can
      upload packages using Pursuit's HTTP API directly:
    <ul>
      <li>
        Gzip the JSON output produced by <code>psc-publish</code> and save it
        to a file.
      <li>
        If you don't already have one, get a GitHub API token by visiting <a
        href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a>.
        No scopes are required, since the token is only used for
        authentication.
      <li>
        Make a POST request to @{PackageIndexR}, with gzipped JSON as the
        request body, including a <code>Content-Encoding: gzip</code> header,
        and with your GitHub token in the Authorization header, like this:
        <code>Authorization: token {token}</code>.
    <p>
      For example, using curl:
    <pre>
      <code>
        curl -X POST \
        \  @{PackageIndexR} \
        \  --data-binary @pursuit.json.gz \
        \  -H 'Content-Encoding: gzip' \
        \  -H 'Accept: application/json' \
        \  -H "Authorization: token $(cat my-oauth-token.txt)" \
        \  -v
    <p>
      If your submission is successful, Pursuit will return a 201 Created
      response, and the URL for your newly uploaded package will be in the
      Location header.

  <div #package-badges .help>
    <h3>Package badges
    <p>
      Pursuit can generate SVG badges for your packages, which you can put on your
      project's homepage, or perhaps its GitHub readme.
    <p>
      The suggested markup for a badge is:
    <pre>
      <code>
        #{suggestedBadgeMarkup}
